name: C++ CI Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

env:
  vcpkg_robotology_TAG: v0.4.0
  YCM_TAG: v0.11.0
  YARP_TAG: 964bb26fa4791d83d72882711ea7509306248106
  iDynTree_TAG: v1.1.0
  Catch2_TAG: v2.11.3
  Qhull_TAG: v8.0.0
  CasADi_TAG: 3.5.1

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@master

    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env

    # ============
    # DEPENDENCIES
    # ============

    # Remove apt repos that are known to break from time to time
    # See https://github.com/actions/virtual-environments/issues/323
    - name: Remove broken apt repos [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

    - name: Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        # To avoid spending a huge time compiling vcpkg dependencies, we download a root that comes precompiled with all the ports that we need
        choco install -y wget unzip
        # To avoid problems with non-relocatable packages, we unzip the archive exactly in the same C:/robotology/vcpkg
        # that has been used to create the pre-compiled archive
        cd C:/
        wget https://github.com/robotology/robotology-superbuild-dependencies-vcpkg/releases/download/${env:vcpkg_robotology_TAG}/vcpkg-robotology.zip
        unzip vcpkg-robotology.zip -d C:/
        rm vcpkg-robotology.zip
        # Overwrite the VCPKG_INSTALLATION_ROOT env variable defined by GitHub Actions to point to our vcpkg
        echo "::set-env name=VCPKG_INSTALLATION_ROOT::C:/robotology/vcpkg"

        # Install Catch2
        cd C:/robotology/vcpkg
        ./vcpkg.exe install --overlay-ports=C:/robotology/robotology-vcpkg-binary-ports catch2:x64-windows

    - name: Dependencies [macOS]
      if: matrix.os == 'macOS-latest'
      run: |
        brew update
        brew install ace boost eigen swig qt5 orocos-kdl catch2 qhull ipopt cppad pkg-config

    - name: Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install git build-essential cmake libace-dev coinor-libipopt-dev  libboost-system-dev libboost-filesystem-dev \
                             libboost-thread-dev liborocos-kdl-dev libeigen3-dev swig qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev \
                             libxml2-dev liburdfdom-dev libtinyxml-dev liburdfdom-dev liboctave-dev python-dev valgrind coinor-libipopt-dev

    - name: Cache Source-based Dependencies
      id: cache-source-deps
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/install/deps
        # Including ${{ runner.temp }} is a workaround taken from https://github.com/robotology/whole-body-estimators/pull/62 to fix macos configuration failure on https://github.com/dic-iit/bipedal-locomotion-framework/pull/45
        key: source-deps-${{ runner.os }}-${{runner.temp}}-vcpkg-robotology-${{ env.vcpkg_robotology_TAG }}-ycm-${{ env.YCM_TAG }}-yarp-${{ env.YARP_TAG }}-iDynTree-${{ env.iDynTree_TAG }}-catch2-${{ env.Catch2_TAG }}-qhull-${{ env.Qhull_TAG }}-casADi-${{ env.CasADi_TAG }}


    - name: Source-based Dependencies [Windows]
      if: steps.cache-source-deps.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
      shell: bash
      run: |
        # YCM
        cd ${GITHUB_WORKSPACE}
        git clone -b ${YCM_TAG} https://github.com/robotology/ycm
        cd ycm
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..

        cmake --build . --config ${{ matrix.build_type }} --target INSTALL


        # YARP
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        cd yarp
        git checkout ${YARP_TAG}
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        # Workaround for https://github.com/robotology-dependencies/robotology-vcpkg-binary-ports/issues/3
        export IPOPT_DIR=${VCPKG_INSTALLATION_ROOT}/installed/x64-windows

        # iDynTree
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/iDynTree
        cd iDynTree
        git checkout ${iDynTree_TAG}
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..

        cmake --build . --config ${{ matrix.build_type }} --target install

        # Qhull
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/qhull/qhull
        cd qhull
        git checkout ${Qhull_TAG}
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..
        cmake --build . --config ${{ matrix.build_type }} --target install

        # CasADi
        # We override the casadi installation structure to be compliant with the folder structure used for
        # the other dependencies. Please check:
        # https://github.com/casadi/casadi/blob/6f122ca22e2a869903628c5738f154c8ac0f7455/CMakeLists.txt#L317
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/casadi/casadi.git -b ${CasADi_TAG} casadi
        cd casadi
        mkdir build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps \
                     -DINCLUDE_PREFIX:PATH="include" \
                     -DCMAKE_PREFIX:PATH="lib/cmake/casadi" \
                     -DLIB_PREFIX:PATH="lib" \
                     -DBIN_PREFIX:PATH="bin" \
                     -DWITH_IPOPT=BOOL:ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install


    - name: Source-based Dependencies [Ubuntu/macOS]
      if: steps.cache-source-deps.outputs.cache-hit != 'true' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest')
      shell: bash
      run: |
        # YCM
        cd ${GITHUB_WORKSPACE}
        git clone -b ${YCM_TAG} https://github.com/robotology/ycm
        cd ycm
        mkdir -p build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..
        cmake --build . --config ${{ matrix.build_type }} --target install

        # YARP
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        cd yarp
        git checkout ${YARP_TAG}
        mkdir -p build
        cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..
        cmake --build . --config ${{ matrix.build_type }} --target install

        # iDynTree
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/iDynTree
        cd iDynTree
        git checkout ${iDynTree_TAG}
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps ..
        cmake --build . --config ${{ matrix.build_type }} --target install

        # CasADi
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/casadi/casadi.git -b ${CasADi_TAG} casadi
        cd casadi
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps -DWITH_IPOPT=BOOL:ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install


    - name: Source-based Dependencies [Ubuntu]
      if: steps.cache-source-deps.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        # Catch2
        git clone -b ${Catch2_TAG} https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir -p build
        cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
               -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps \
               -DBUILD_TESTING=OFF ..

        cmake --build . --config ${{ matrix.build_type }} --target install

        # Qhull
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/qhull/qhull
        cd qhull
        git checkout ${Qhull_TAG}
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install

    - name: CppAD [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        # Catch2
        git clone https://github.com/coin-or/CppAD.git
        cd CppAD
        mkdir -p build
        cd build
        cmake -Dcppad_prefix=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps \
              -DBUILD_TESTING=OFF ..

        cmake --build . --config ${{ matrix.build_type }} --target install

    # ===================
    # CMAKE-BASED PROJECT
    # ===================

    - name: Configure [Windows]
      # Use bash also on Windows (otherwise cd, mkdir, ... do not work)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DBUILD_TESTING:BOOL=ON ..

    - name: Configure [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DBUILD_TESTING:BOOL=ON \
              -DFRAMEWORK_RUN_Valgrind_tests:BOOL=ON ..

    - name: Configure [macOS]
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DBUILD_TESTING:BOOL=ON ..

    - name: Build
      shell: bash
      run: |
        cd build
        # Attempt of fix for using YARP idl generators (that link ACE) in Windows
        # See https://github.com/robotology/idyntree/issues/569
        export PATH=$PATH:/d/a/bipedal-locomotion-framework/bipedal-locomotion-framework/install/bin:/d/a/bipedal-locomotion-framework/bipedal-locomotion-framework/install/deps/bin:/c/robotology/vcpkg/installed/x64-windows/bin:/c/robotology/vcpkg/installed/x64-windows/debug/bin
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      shell: bash
      run: |
        cd build
        export PATH=$PATH:/d/a/bipedal-locomotion-framework/bipedal-locomotion-framework/install/bin:/d/a/bipedal-locomotion-framework/bipedal-locomotion-framework/install/deps/bin:/c/robotology/vcpkg/installed/x64-windows/bin:/c/robotology/vcpkg/installed/x64-windows/debug/bin
        ctest --output-on-failure -C ${{ matrix.build_type }} .
